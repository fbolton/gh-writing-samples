"use strict";(self.webpackChunkmd_website=self.webpackChunkmd_website||[]).push([[16],{2374:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"jetbrains-demo","metadata":{"permalink":"/gh-writing-samples/blog/jetbrains-demo","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-10-jetbrains-demo.md","source":"@site/blog/2023-07-10-jetbrains-demo.md","title":"Space automation with the API client","description":"The purpose of this blog post is to explain some of the capabilities of the Space API client in the context of build automation.","date":"2023-07-10T00:00:00.000Z","formattedDate":"July 10, 2023","tags":[],"readingTime":7.125,"hasTruncateMarker":false,"authors":[{"name":"Fintan Bolton","title":"Technical Writer","imageURL":"https://github.com/fbolton.png","key":"fbolton"}],"frontMatter":{"slug":"jetbrains-demo","authors":["fbolton"]}},"content":"The purpose of this blog post is to explain some of the capabilities of the Space API client in the context of build automation.\\nOne of the more interesting features of Space\'s Kotlin-based automation script is the ability to integrate with the other modules in the Space ecosystem.\\n\\nFor example, in response to a certain kind of build failure, the automation script could create a new issue or add a comment to an existing issue, by integrating with the Space planning module.\\nAlternatively, if there is a build failure, the automation script could log messages to a chat channel, by integrating with the Space chat module.\\nAll of these integration capabilities can be accessed through the Space API client.\\n\\nThis post is organized as a tutorial, working on the assumption that you have never used JetBrains Space before.\\nThere is therefore some groundwork to get through, setting up a Hello World project and initializing your first Space project, before we can start discussing the topic of Space automation with the API client.\\n\\nBefore you begin, make sure you have the following prerequisites:\\n- A GitHub account.\\n- A [JetBrains Space](https://www.jetbrains.com/space/) hosted account (free tier).\\n\\n## Create a Hello World application\\n\\nBefore you can start exploring the capabilities of Space automation, you need to have some code to build.\\nA quick way to get started is to use the `gradle init` command to generate a complete Hello World application in Java.\\n\\nPerform the following steps to create the Hello World application on your local machine:\\n\\n1. If you do not already have `gradle` installed, follow the relevant [Gradle installation instructions](https://gradle.org/install/) for your OS.\\n2. In a command prompt, create a directory for the new Gradle project:\\n    ```\\n    mkdir jetbrains-demo\\n    ```\\n\\n3. Switch to the new directory and run `gradle install`, as follows:\\n    ```\\n    cd jetbrains-demo\\n    gradle install\\n    ```\\n\\n    When prompted, select the following options:\\n    - type of project: application\\n    - implementation language: Java\\n    - build script DSL: Kotlin\\n    - test framework: JUnit 4\\n\\n4. Go to your GitHub home page, https://github.com/GH_ACCOUNT_NAME, and create a new Git repository for the project, `jetbrains-demo`.\\n\\n5. In the `jetbrains-demo` directory on your local machine, enter the following Git commands to initialize the Git repository and push it upstream to GitHub (remembering to substitute your account name for `GH_ACCOUNT_NAME`):\\n    ```\\n    git init\\n    git add .\\n    git commit -m \\"Initial commit\\"\\n    git remote add origin git@github.com:GH_ACCOUNT_NAME/jetbrains-demo.git\\n    git push -u origin master\\n    ```\\n\\nThe Gradle Hello World application should now be available in the `jetbrains-demo` repo on GitHub.\\nTo test the build locally, you can run the following command:\\n\\n```\\n./gradlew build\\n```\\n\\n\\n## Prepare a Space project\\n\\nIn this step, you create a new Space project for building and working with the Hello World application.\\nIf you do not already have a Space account, go to https://www.jetbrains.com/space/app/login and fill in the **Hosted by JetBrains** form to sign up for a free tier account.\\n\\nAfter signing up for a Space account, you can create a new project and link it to the `jetbrains-demo` Git repository as follows:\\n\\n1. Create a new Space project, by clicking the `+` icon from the row of icons in the upper-right corner of the screen.\\n\\n   ![Upper-right icons](_static/upper-left-sidebar-icons.png).\\n\\n2. In the **New Project** dialog, enter JetBrains Space demo in the **Name** field, enter `JETBRAINS-DEMO` in the **Key** field, select the **Visibility** to be Internal, and then click **Create**.\\n3. The focus automatically switches to the new JetBrains Space demo project.\\n4. To import your `jetbrains-demo` GitHub repository into the Space project, click the **Repositories** tab on the sidebar and then click the **New repository** button.\\n5. In the **New Repository in JetBrains Space demo** dialog, click the **Import a repository** tab.\\n6. Copy the HTTPS URL for the `jetbrains-demo` GitHub repo (available under the GitHub **Code** button) and paste it into the **Remote repository URL** field in the dialog.\\n7. Click the slider switch to enable **Mirror changes from external repository**.\\n8. Under **Authentication**, select **Anonymous**.\\n9. Click **Create** to import the GitHub repository into the Space project.\\n\\n## Prepare the Chat module\\n\\nIn this automation integration, the goal is to write an automation script that can publish messages to the `#developers` chat channel.\\nIt is therefore necessary to create the `#developers` chat channel in the Chat module, as follows:\\n\\n1. Click on the chat icon in the lower left of the screen.\\n2. Click on the vertical three dots icon and select **Create | Channel**.\\n\\n    ![Create channel](_static/create-channel.png)\\n\\n3. In the **New Channel** dialog, create a new channel called `developers`.\\n4. Click **Create channel**.\\n\\n\\n## Add an automation script to your project\\n\\n### Automation script\\n\\nThe automation script is written in a Kotlin-based DSL and stored in the `.space.kts` file in the root directory of the project.\\nFor this Hello World example, we use the following automation script:\\n\\n```kotlin\\njob(\\"Build and publish\\") {\\n    container(displayName = \\"Build and notify\\", image = \\"gradle:7.2.0-jdk11\\") {\\n        kotlinScript { api ->\\n            val channel = ChannelIdentifier.Channel(ChatChannel.FromName(\\"developers\\"))\\n            try {\\n                api.gradlew(\\"build\\")\\n                val content = ChatMessage.Text(\\"Build succeeded\\")\\n                api.space().chats.messages.sendMessage(channel = channel, content = content)\\n            } catch (ex: Exception) {\\n                val content = ChatMessage.Text(\\"Build failed\\")\\n                api.space().chats.messages.sendMessage(channel = channel, content = content)\\n\\n                // get current build run number\\n                val runNumber = api.executionNumber()\\n                val content2 = ChatMessage.Text(\\"Job \'Build and publish\' #$runNumber failed\\")\\n                api.space().chats.messages.sendMessage(channel = channel, content = content2)\\n            }\\n        }\\n    }\\n}\\n```\\n\\nThis script defines a build job that runs in a Docker container, using the `gradle:7.2.0-jdk11` Docker image.\\nThe script has two main purposes:\\n\\n- Build the Hello World application. The build is initiated by invoking `api.gradlew(\\"build\\")`, which calls the `gradlew` wrapper script in the root directory of the project.\\n- Send status messages to the `#developer` chat channel, by invoking the `api.space()` API client.\\n\\n### Space API client\\n\\nThe Space API client is a powerful tool for integrating automation scripts with the various Space modules.\\nBy invoking `api.space()`, you get access to a wide range of Space modules, for example:\\n```kotlin\\napi.space().chats\\napi.space().projects.planning.issues\\napi.space().projects.planning.boards\\napi.space().projects.documents\\napi.space().projects.repositories\\n```\\n\\nTo further explore the integration capabilities offered by the Space API client, take a look at the [API Playground](https://www.jetbrains.com/help/space/api.html#api-playground), which can be accessed from your hosted account.\\n\\n:::note\\nNot all module integrations are available on the free tier.\\nTo see which modules the Automation Service is allowed to invoke, go to the **Administration** view (accessible through the three dots icon at the bottom of the sidebar), select **Roles** from the sidebar, and then select **Project Templates | Automation Service**, and click **View permissions**.\\n:::\\n\\nIn the current example, our automation script invokes the Space API client to integrate with the Chats module:\\n```kotlin\\napi.space().chats.messages.sendMessage(channel = channel, content = content)\\n```\\nThis invocation sends the message stored in the `content` value to the `developers` chat channel.\\nNote that the arguments of `sendMessage` need to be initialized with the correct data types:\\n- `channel` is of `ChannelIdentifier.Channel` type\\n- `content` is of `ChatMessage.Text` type\\n\\nTo get a better understanding of the syntax for invoking the API client in Kotlin, see the [Space SDK](https://www.jetbrains.com/help/space/space-sdk.html) guide from the Space product documentation.\\n\\n### Adding the automation script\\n\\nTo add the automation script to the Space project:\\n\\n1. On your local machine, save the automation script to the `.space.kts` file in the root directory of the project.\\n2. Add the `.space.kts` file to source control and push to GitHub:\\n    ```shell\\n    git add .space.kts\\n    git commit -m \\"Added automation\\"\\n    git push\\n    ```\\n3. Resync the mirrored repository in your Space project to the `jetbrains-demo` repository in GitHub, as follows:\\n\\n    1. In the JetBrains Space demo project, select the **Repositories | jetbrains-demo** tab from the sidebar to access the mirrored repository.\\n    2. In the top-right of the screen, click **Settings**.\\n    3. On the **Repository Settings** page, select the **Mirroring** tab and click **Sync now**.\\n\\n4. After syncing the `.space.kts` script, a job automatically kicks off in Space. Go to the **Jobs** tab to see the job running.\\n5. To check whether the automation script succeeded in sending a message to the `#developers` channel, click the **Chats** icon from the row of icons at the bottom of the sidebar.\\n   In the chats view, select the `developers` channel to view the recent messages. If the build was successful, you should see the message:\\n    ```shell\\n    Automation Service\\n    Build succeeded\\n    ```\\n\\n\\n## Conclusion\\n\\nIncorporating the Space API client into your automation scripts enables support for a variety of integration scenarios, limited only by your imagination (and also, perhaps, by the limitations of the free tier).\\nFor further exploration of the API client\'s capabilities, it\'s recommended to take a look at the Space [API Playground](https://www.jetbrains.com/help/space/api.html#api-playground)."}]}')}}]);